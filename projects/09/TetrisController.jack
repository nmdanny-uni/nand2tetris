/* This class is responsible for driving the game, by handling keyboard inputs
   and drawing to screen according to the current state of the game.
*/
class TetrisController {

  // used to draw squares on screen
  field TetrisBoard board;

  // either 0(a null pointer) if the game hasn't started, otherwise a valid Piece object.
  field TetrisPiece currentPiece;

  // current score
  field int score;

  /* Starts the game, responsible for initializing relevant fields */
  method void startGame() {
    do Output.moveCursor(0, 0);
    do Screen.clearScreen();

    let board = TetrisBoard.new();
    let score = 0;
    do board.draw();
    do createNewPiece();
    return;
  }

  constructor TetrisController new(){
    return this;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Processes player inputs. To be ran every tick during
      the game, this returns whether the game should continue running,
      returns false when restarting/quitting, otherwise true.
  */
  method boolean processInput() {
    if (Keyboard.keyPressed() = 81) { // Q button
      do GameScreens.showQuittingScreen(score);
      return false;
    }

    if (Keyboard.keyPressed() = 82) { // R button
      do GameScreens.showRestartScreen(score);
      return false;
    }
    if (Keyboard.keyPressed() = 130) { // left-arrow
      do movePiece(-1, 0);
    }
    if (Keyboard.keyPressed() = 132) { // right-arrow
      do movePiece(1, 0);
    }
    if (Keyboard.keyPressed() = 133) { // down-arrow
      do movePiece(0, 1);
    }
    return true;
  }

  /** Creates a new tetris piece and draws it on the board
  */
  method void createNewPiece() {
    if (~(currentPiece = 0)) {
      do currentPiece.dispose();
    }
    let currentPiece = TetrisPiece.new(612, 5, 0);
    do currentPiece.draw(board, true);
    return;
  }

  /** Tries moving the piece by the given units, returning whether the move was
      successfull or blocked.
  */
  method boolean movePiece(int deltaX, int deltaY) {
    if (currentPiece = 0) {
      do Output.printString("Null pointer dereference at movePiece");
      do Sys.halt();
    }
    // TODO check for collisions and ensure new position is within bounds

    // Un-draw the piece at the old location
    do currentPiece.draw(board, false);

    // Change its coordinates
    do currentPiece.setTopLeftCoordinates(currentPiece.getTopLeftX() + deltaX,
                                          currentPiece.getTopLeftY() + deltaY);

    // Draw the piece at the new location
    do currentPiece.draw(board, true);
    return true;
  }

  /** The main entry point, responsible for running the game
  */
  method void gameLoop() {
    var boolean continuePlaying;

    // only ran once in the program's lifetime
    do GameScreens.showStartScreen();
    while (true) {
      do startGame();
      let continuePlaying = true;

      // the following loop occurs within a single game
      while (continuePlaying) {
        let continuePlaying = processInput();
        do Sys.wait(getTickDelayMs());
      }

    }
    return;
  }


  /** Number of milliseconds between each game tick */
  method int getTickDelayMs() {
    return 100;
  }
}
