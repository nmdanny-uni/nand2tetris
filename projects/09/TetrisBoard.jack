/** This class manages a grid of squares in a Tetris game, and is responsible for drawing
    their relevant pixels in the correct place in the screen in relation to the board's position.

    Each square has a coordinate between (0,0) to (numRows, numCols) and may be on or off(black or white)

    In essence, this is a 'Screen' wrapper, allowing the programmer to look at each each square
    as a discrete unit rather than deal with raw pixels, and the math involved in calculating pixel
    offsets and other effects such as square padding..
*/
class TetrisBoard {
  field int startingRow;
  field int score;
  field int borderWidth;

  // a 2D matrix (using a 1D array via row major order) representing occupied/clear tetris
  // squares. The square at (x, y) can be accessed via grid[x + (y * numCols)]
  // The coordinate (0, 0) is the topleft-most square, and (numRows-1, numCols-1) is the
  // bottomright-most square.
  field Array grid;
  field int numRows;
  field int numCols;

  // Coordinates of the topleft corner of the board.
  field int tlX;
  field int tlY;

  constructor TetrisBoard new() {
    var int x, y;
    var int i;
    let startingRow = 12;
    let borderWidth = 5;
    let score = 0;

    // Shift our board so that there'll be space for extra stuff & information
    let tlX = 200;
    let tlY = startingRow + (borderWidth * 2);

    // Set game dimensions
    let numRows = TetrisBoard.getNumRows();
    let numCols = TetrisBoard.getNumColumns();
    let grid = Array.new(numRows * numCols);

    // initialize all squares
    let x = 0;
    while (x < numCols) {
      let y = 0;
      while (y < numRows) {
        let grid[x + (y * numCols)] = TetrisSquare.new(tlX + (x * TetrisSquare.getHeight()),
                                                       tlY + (y * TetrisSquare.getHeight()));
        let y = y + 1;
      }
      let x = x + 1;
    }
    return this;
  }

  /** Sets the square at the (x,y) coordinate in the grid to the given mode.
      See TetrisSquare documentation for explanation about modes.
  */
  method void setMode(int x, int y, int mode) {
    var TetrisSquare square;
    if ((x < 0) | (y < 0) | (x > (numCols - 1)) | (y > (numRows - 1))) {
      do Output.printString("TetrisBoard.setMode() accessed coordinates out of bounds");
      do Sys.halt();
    }
    if ((mode < 0) | (mode > 2)) {
      do Output.printString("TetrisBoard.setMode() got invalid mode");
      do Sys.halt();
    }
    let square = grid[x + (y * numCols)];
    do square.setMode(mode);
    return;
  }


  /** Returns true if the given coordinate is occupied by a placed block(mode = 2)
      OR if it's out of bounds
  */
  method boolean isOccupied(int x, int y) {
    var TetrisSquare square;
    if ((x < 0) | (y < 0) | (x > (numCols - 1)) | (y > (numRows - 1))) {
      return true;
    }
    let square = grid[x + (y * numCols)];
    return square.getMode() = 2;
  }

  /** Draws/updates all squares on screen.
      Note, this is a heavy method, it should only be ran at the start of the game.
      Use the more granular 'setMode' method to toggle specific squares that move.
  */
  method void draw() {
    var int i;
    var TetrisSquare curSquare;
    do Screen.clearScreen();

    // drawing score (textual interface)
    do Output.printString("Score: ");
    do Output.printInt(score);
    do Output.println();

    // drawing game border
    do Screen.setColor(true);
    do Screen.drawRectangle(0, startingRow, 511, 255);
    do Screen.setColor(false);
    do Screen.drawRectangle(borderWidth, startingRow + borderWidth, 511 - borderWidth, 255 - borderWidth);

    // draw all squares
    let i = 0;
    while (i < (numRows * numCols)) {
      let curSquare = grid[i];
      do curSquare.draw();
      let i = i + 1;
    }

    return;
  }

  method void dispose() {
    var int i;
    var TetrisSquare curSquare;
    let i = 0;

    // clear the array's contents
    while (i < (numRows * numCols)) {
      let curSquare = grid[i];
      do curSquare.dispose();
      let i = i + 1;
    }
    do grid.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the number of rows in our game */
  function int getNumRows() {
    return 20;
  }

  /** Returns the number of columns in our game */
  function int getNumColumns() {
    return 10;
  }
}
