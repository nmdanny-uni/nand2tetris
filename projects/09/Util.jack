/** Contains various helper functions */
class Util {

  // used for more efficient computations of shifts
  // powersOf2[x] == 2^x
  static Array powersOf2;

  /** Initializes the above array, must be run at program init */
  function void initPowersOf2() {
    //let powersOf2 = Array.new(1);
    let powersOf2 = Array.new(16);
    let powersOf2[0] = 1;
    let powersOf2[1] = 2;
    let powersOf2[2] = 4;
    let powersOf2[3] = 8;
    let powersOf2[4] = 16;
    let powersOf2[5] = 32;
    let powersOf2[6] = 64;
    let powersOf2[7] = 128;
    let powersOf2[8] = 256;
    let powersOf2[9] = 512;
    let powersOf2[10] = 1024;
    let powersOf2[11] = 2048;
    let powersOf2[12] = 4096;
    let powersOf2[13] = 8192;
    let powersOf2[14] = 16384;
    // the following obviously isn't correct, but it's good enough for
    // purposes of bitwise operations.
    let powersOf2[15] = -32767 - 1;
    return;
  }

  /** Returns the left shift, number << amount */
  function int leftShift(int number, int amount){
    return number * powersOf2[amount];
  }

  /** Returns the logical right shift, number >> amount */
  function int rightShift(int number, int amount) {
    return number / powersOf2[amount];
  }

  /** Returns true if the ix'th bit(starting from LSB) of num is set */
  function boolean getBit(int num, int ix) {
    return ~((num & Util.leftShift(1, ix)) = 0);
  }

  /** Sets the ix'th bit(starting from LSB) of num to 1 */
  function int setBit(int num, int ix) {
    return num | Util.leftShift(1, ix);
  }

  /** Perfoms a % (2^exp), that is, the remainder of the division of 'a' by given exponent.
      This should be faster than below, as it doesn't perform costly division and multiplication.
   */
  function int modulus_exp(int a, int exponent) {
    return a & (powersOf2[exponent] - 1);
  }

  /** Returns a % b, the remainder of a/b
      Note, this is C-like modulus, using division that rounds towards 0.
   */
  function int modulus(int a, int b) {
    // (a/b) * b + a%b = a
    // a%b = a - (a/b)*b
    return a - ((a/b)*b);
  }

  /** Returns a XOR b */
  function int xor(int a, int b) {
    return (a | b) & (~(a & b));
  }

  /** Returns absolute value of a */
  function int abs(int a) {
    if (a < 0) {
      return -a;
    }
    return a;
  }

  /** Generates a random number in the given range, range must
      consist of non-negative numbers only. */
  function int getNumberInRange(int start, int endExclusive) {
    var int modulus, result, randomNumber;
    let randomNumber = Util.abs(Random.getNumber());
    let modulus = Util.abs(Util.modulus(randomNumber, endExclusive-start));
    let result = start + modulus;
    if ((result < start) | (result > (endExclusive - 1))) {
      do Output.printString("getNumberInRange(");
      do Output.printInt(start);
      do Output.printString(", ");
      do Output.printInt(endExclusive);
      do Output.printString(") yielded number out of range: ");
      do Output.printInt(result);
      do Output.println();
      do Output.printString("rand-number: ");
      do Output.printInt(randomNumber);
      do Output.println();
      do Output.printString("modulus: ");
      do Output.printInt(modulus);
      do Sys.halt();
    }
    return result;
  }
}
