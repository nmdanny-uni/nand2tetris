class Tests {
  field boolean success;

  constructor Tests new() {
    let success = true;
    return this;
  }

  method boolean getSuccess() {
    return success;
  }

  method void assert(boolean bool, String errMsg) {
    if (~bool) {
      do Output.printString("Test failed: ");
      do Output.printString(errMsg);
      do Output.println();
      let success = false;
    }
    return;
  }


  function boolean runAllTests() {
    var Tests tests;
    let tests = Tests.new();
    do tests.runTests();
    return tests.getSuccess();
  }

  method void runTests() {
    do testBitShifts();
    do testGetBit();
    do testModulus();
    do testXor();
    return;
  }

  method void testBitShifts() {
    do assert(Util.leftShift(1, 1) = 2, "1 << 1 = 2");
    do assert(Util.leftShift(1, 2) = 4, "1 << 2 = 4");
    do assert(Util.leftShift(1, 3) = 8, "1 << 3 = 8");

    do assert(Util.rightShift(5, 3) = 0, "5 >> 3 = 0");
    do assert(Util.rightShift(135, 2) = 33, "135 >> 2 = 33");
    do assert(Util.rightShift(31, 0) = 31, "31 >> 0 = 31");
    do assert(Util.rightShift(4641, 3) = 580, "4641 >> 3 = 580");
    do assert(Util.rightShift(0, 5) = 0, "0 >> 5 = 0");
    do assert(Util.rightShift(16211, 1) = 8105, "16211 >> 1 = 8105");

    return;
  }

  method void testGetBit() {
    do assert(Util.getBit(1337, 0), "1 bit of 1337 is 1");
    do assert(~Util.getBit(1337, 1), "2 bit of 1337 is 0");
    do assert(~Util.getBit(1337, 2), "3 bit of 1337 is 0");
    do assert(Util.getBit(1337, 3), "4 bit of 1337 is 1");
    do assert(~Util.getBit(1337, 15), "16 bit of 1337 is 0");
    do assert(Util.getBit(-15047, 15), "16 bit of -15047 is 1");
    do assert(Util.getBit(-15047, 14), "15 bit of -15047 is 1");
    do assert(~Util.getBit(17721, 15), "16 bit of 17721 is 0");
    do assert(Util.getBit(17721, 14), "15 bit of 17721 is 1");

    return;
  }

  method void testModulus() {
    do assert(Util.modulus_exp(0, 0) = 0, "0 % 1 = 0");
    do assert(Util.modulus_exp(0, 3) = 0, "0 % 8 = 0");
    do assert(Util.modulus_exp(3, 0) = 0, "3 % 1 = 0");
    do assert(Util.modulus_exp(3, 3) = 3, "3 % 8 = 3");
    do assert(Util.modulus_exp(15, 5) = 15, "15 % 32 = 15");
    do assert(Util.modulus_exp(15, 0) = 0, "15 % 1 = 0");
    do assert(Util.modulus_exp(15, 4) = 15, "15 % 16 = 15");
    do assert(Util.modulus_exp(2, 15) = 2, "2 % 32768 = 2");
    do assert(Util.modulus_exp(17, 3) = 1, "17 % 8 = 1");
    do assert(Util.modulus_exp(28, 3) = 4, "28 % 8 = 4");
    do assert(Util.modulus_exp(-3, 2) = 1, "-3 % 4 = 1");
    do assert(Util.modulus_exp(-3, 4) = 13, "-3 % 16 = 13");
    do assert(Util.modulus_exp(-3, 6) = 61, "-3 % 64 = 61");


    do assert(Util.modulus(0, 3) = 0, "0 % 3 = 0");
    do assert(Util.modulus(3, 3) = 0, "3 % 3 = 0");
    do assert(Util.modulus(15, 5) = 0, "15 % 5 = 0");
    do assert(Util.modulus(15, 4) = 3, "15 % 4 = 3");
    do assert(Util.modulus(2, 15) = 2, "2 % 15 = 2");
    do assert(Util.modulus(17, 3) = 2, "17 % 3 = 2");
    do assert(Util.modulus(28, 3) = 1, "28 % 3 = 1");
    do assert(Util.modulus(0, 1) = 0, "0 % 1 = 0");
    do assert(Util.modulus(0, 135) = 0, "0 % 135 = 0");
    do assert(Util.modulus(523, 5) = 3, "523 % 5 = 3");
    do assert(Util.modulus(132, 6) = 0, "132 % 6 = 0");
    do assert(Util.modulus(1911, 2412) = 1911, "1911 % 2412 = 1911");
    do assert(Util.modulus(1351, 25945) = 1351, "1351 % 25945 = 1351");
    return;
  }

  method void testXor() {
    do assert(Util.xor(1, 0) = 1, "1 ^ 0 = 1");
    do assert(Util.xor(0, 1) = 1, "0 ^ 1 = 1");
    do assert(Util.xor(135, 0) = 135, "135 ^ 0 = 135");
    do assert(Util.xor(0, 135) = 135, "0 ^ 135 = 135");
    do assert(Util.xor(523, 5) = 526, "523 ^ 5 = 526");
    do assert(Util.xor(132, 6) = 130, "132 ^ 6 = 130");
    do assert(Util.xor(1911, 2412) = 3611, "1911 ^ 2412 = 3611");
    do assert(Util.xor(-135, -531) = 660, "-135 ^ -531 = 660");
    do assert(Util.xor(-135, 7) = -130, "-135 ^ 7 = -130");
    do assert(Util.xor(0, -9135) = -9135, "0 ^ -9135 = -9135");
    do assert(Util.xor(-1341, 2511) = -3316, "-1341 ^ 2511 = -3316");
    do assert(Util.xor(1351, 25945) = 24606, "1351 ^ 25945 = 24606");
    return;
  }
}
