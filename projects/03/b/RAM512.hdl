// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 *
 * Similar idea to RAM64 implementation, now using bits [6..8] to choose a chip,
 * and fanning out bits [0..5] as RAM64 addresses
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    RAM64(in=in, load=loadRam1, out=outRam1, address=address[0..5]);
    RAM64(in=in, load=loadRam2, out=outRam2, address=address[0..5]);
    RAM64(in=in, load=loadRam3, out=outRam3, address=address[0..5]);
    RAM64(in=in, load=loadRam4, out=outRam4, address=address[0..5]);
    RAM64(in=in, load=loadRam5, out=outRam5, address=address[0..5]);
    RAM64(in=in, load=loadRam6, out=outRam6, address=address[0..5]);
    RAM64(in=in, load=loadRam7, out=outRam7, address=address[0..5]);
    RAM64(in=in, load=loadRam8, out=outRam8, address=address[0..5]);
    Mux8Way16(a=outRam1, b=outRam2, c=outRam3, d=outRam4,
              e=outRam5, f=outRam6, g=outRam7, h=outRam8,
              sel=address[6..8], out=out);
    DMux8Way(in=load, sel=address[6..8],
             a=loadRam1, b=loadRam2, c=loadRam3, d=loadRam4,
             e=loadRam5, f=loadRam6, g=loadRam7, h=loadRam8);
}
