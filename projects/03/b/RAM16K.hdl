// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).

 * Similar idea to RAM512 implementation, now using bits [12..13] to choose a chip,
 * and fanning out bits [0..11] as RAM4K addresses.
 * (Now we have a choice of 4 instead of 8, hence only 2 bits for selecting a RAM unit)
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    RAM4K(in=in, load=loadRam1, out=outRam1, address=address[0..11]);
    RAM4K(in=in, load=loadRam2, out=outRam2, address=address[0..11]);
    RAM4K(in=in, load=loadRam3, out=outRam3, address=address[0..11]);
    RAM4K(in=in, load=loadRam4, out=outRam4, address=address[0..11]);
    Mux4Way16(a=outRam1, b=outRam2, c=outRam3, d=outRam4,
              sel=address[12..13], out=out);
    DMux4Way(in=load, sel=address[12..13],
             a=loadRam1, b=loadRam2, c=loadRam3, d=loadRam4);
}
