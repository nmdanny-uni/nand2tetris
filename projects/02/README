danielkerbel
===============================================================================
Daniel Kerbel, ID ***REMOVED***, daniel.kerbel@mail.huji.ac.il
===============================================================================

                           Project 2 - Implementation of ALU and some extra chips
                           ----------------------- 
  

Submitted Files

.
|-- Add16.hdl
|-- ALU.hdl
|-- FullAdder.hdl
|-- HalfAdder.hdl
|-- Identity.hdl         - Helper chip
|-- Inc16.hdl
|-- Mul.hdl
|-- README               - This file
|-- LogicalShiftLeft.hdl - Helper chip 
|-- ShiftLeft.hdl
`-- ShiftRight.hdl

Remarks
-------
== Logical left shift cip ==
This chip eliminates the need for special sign handling within 'Mul'. 
Why? Because we've been instructed to ignore overflows within the 'Mul' chip - which is the natural
behavior of a logical left shift (in contrast to the arithmetic one we've implemented, which causes
unwanted behavior when using negative numbers in Mul)


== Identity Helper Chip ==
The 'Identity' chip(used within the Shift gates) is used due to the inability to connect internal
pins directly to output pins, I think this is a limitation of HDL and thus this gate can be easily
optimized in real life, which would make Half/FullAdders use only 1 NAND (for the LSB/MSB which are
treated differently).

== ALU optimization ==
It may have been possible to further optimize the ALU, especially several usages of Muxes.
However, Muxes are an elegant way of expressing conditionals, and unlike more elementary chips,
I believe that CPUs have very few ALUs inside them, thus the gains from optimizing this specific
chip are fairly small relative to chips such as adders, shifts and so on...
