/** out = a * b
  * Some insights about multiplying two binary numbers:
  * Like with multiplication of decimals, we multiply 'a' by each digit of 'b', left-shifted k units,
  * k being the index (k=0 being the LSB, that is, multiplying 'a' by the first digit involves no shift)
  *
  * But, in contrast to decimal multiplication, the partial product of 'a' by a digit of 'b', is either
  * a(if the digit was 1) or 0000...0 (if the digit was 0).
  * So basically, the process is as follows:
  *  - Foreach i in 0 to 15, let prod_i = a if b[i] == 1, else 0(repeated 16 times)
  *                          let prod_i_shifted = leftShift i times of prodI
  *  out = sum prod_i_shifted for i in 0 to 15.  (sum can be done with 15 Add16 gates)
  */
CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    // I will use the following notation for internal pins:
    // pNsY means the partial product of a with digit index N, and has to be LShifted Y times
    PARTS:

    // First, we use a Mux for choice (if the i'th digit in b is 1, its multiplication with a is
    // a, not including the required shifts, otherwise 0)
    // Theoretically, I could've used something similar to And16,
    // e.g something like And16(a=a, b[0..15]=b[0], out=p0s0), but
    // HDL doesn't have syntax to extend a bit to a bus (unlike with true/false).
    Mux16(a=false, b=a, sel=b[0], out=p0s0);
    Mux16(a=false, b=a, sel=b[1], out=p1s1);
    Mux16(a=false, b=a, sel=b[2], out=p2s2);
    Mux16(a=false, b=a, sel=b[3], out=p3s3);
    Mux16(a=false, b=a, sel=b[4], out=p4s4);
    Mux16(a=false, b=a, sel=b[5], out=p5s5);
    Mux16(a=false, b=a, sel=b[6], out=p6s6);
    Mux16(a=false, b=a, sel=b[7], out=p7s7);
    Mux16(a=false, b=a, sel=b[8], out=p8s8);
    Mux16(a=false, b=a, sel=b[9], out=p9s9);
    Mux16(a=false, b=a, sel=b[10], out=p10s10);
    Mux16(a=false, b=a, sel=b[11], out=p11s11);
    Mux16(a=false, b=a, sel=b[12], out=p12s12);
    Mux16(a=false, b=a, sel=b[13], out=p13s13);
    Mux16(a=false, b=a, sel=b[14], out=p14s14);
    Mux16(a=false, b=a, sel=b[15], out=p15s15);

    // Now our goal is to shift all partial products the required amount of times,
    //until we get pNs0 forall N in 0 to 15. Then we'll be able to add them together

    // The fact that I wrote a python program to print the following statements
    // makes me suspect that this isn't very efficient. TODO improve this

    // Shifts for digit 1
    ShiftLeft(in=p1s1, out=p1s0);
    // Shifts for digit 2
    ShiftLeft(in=p2s2, out=p2s1);
    ShiftLeft(in=p2s1, out=p2s0);
    // Shifts for digit 3
    ShiftLeft(in=p3s3, out=p3s2);
    ShiftLeft(in=p3s2, out=p3s1);
    ShiftLeft(in=p3s1, out=p3s0);
    // Shifts for digit 4
    ShiftLeft(in=p4s4, out=p4s3);
    ShiftLeft(in=p4s3, out=p4s2);
    ShiftLeft(in=p4s2, out=p4s1);
    ShiftLeft(in=p4s1, out=p4s0);
    // Shifts for digit 5
    ShiftLeft(in=p5s5, out=p5s4);
    ShiftLeft(in=p5s4, out=p5s3);
    ShiftLeft(in=p5s3, out=p5s2);
    ShiftLeft(in=p5s2, out=p5s1);
    ShiftLeft(in=p5s1, out=p5s0);
    // Shifts for digit 6
    ShiftLeft(in=p6s6, out=p6s5);
    ShiftLeft(in=p6s5, out=p6s4);
    ShiftLeft(in=p6s4, out=p6s3);
    ShiftLeft(in=p6s3, out=p6s2);
    ShiftLeft(in=p6s2, out=p6s1);
    ShiftLeft(in=p6s1, out=p6s0);
    // Shifts for digit 7
    ShiftLeft(in=p7s7, out=p7s6);
    ShiftLeft(in=p7s6, out=p7s5);
    ShiftLeft(in=p7s5, out=p7s4);
    ShiftLeft(in=p7s4, out=p7s3);
    ShiftLeft(in=p7s3, out=p7s2);
    ShiftLeft(in=p7s2, out=p7s1);
    ShiftLeft(in=p7s1, out=p7s0);
    // Shifts for digit 8
    ShiftLeft(in=p8s8, out=p8s7);
    ShiftLeft(in=p8s7, out=p8s6);
    ShiftLeft(in=p8s6, out=p8s5);
    ShiftLeft(in=p8s5, out=p8s4);
    ShiftLeft(in=p8s4, out=p8s3);
    ShiftLeft(in=p8s3, out=p8s2);
    ShiftLeft(in=p8s2, out=p8s1);
    ShiftLeft(in=p8s1, out=p8s0);
    // Shifts for digit 9
    ShiftLeft(in=p9s9, out=p9s8);
    ShiftLeft(in=p9s8, out=p9s7);
    ShiftLeft(in=p9s7, out=p9s6);
    ShiftLeft(in=p9s6, out=p9s5);
    ShiftLeft(in=p9s5, out=p9s4);
    ShiftLeft(in=p9s4, out=p9s3);
    ShiftLeft(in=p9s3, out=p9s2);
    ShiftLeft(in=p9s2, out=p9s1);
    ShiftLeft(in=p9s1, out=p9s0);
    // Shifts for digit 10
    ShiftLeft(in=p10s10, out=p10s9);
    ShiftLeft(in=p10s9, out=p10s8);
    ShiftLeft(in=p10s8, out=p10s7);
    ShiftLeft(in=p10s7, out=p10s6);
    ShiftLeft(in=p10s6, out=p10s5);
    ShiftLeft(in=p10s5, out=p10s4);
    ShiftLeft(in=p10s4, out=p10s3);
    ShiftLeft(in=p10s3, out=p10s2);
    ShiftLeft(in=p10s2, out=p10s1);
    ShiftLeft(in=p10s1, out=p10s0);
    // Shifts for digit 11
    ShiftLeft(in=p11s11, out=p11s10);
    ShiftLeft(in=p11s10, out=p11s9);
    ShiftLeft(in=p11s9, out=p11s8);
    ShiftLeft(in=p11s8, out=p11s7);
    ShiftLeft(in=p11s7, out=p11s6);
    ShiftLeft(in=p11s6, out=p11s5);
    ShiftLeft(in=p11s5, out=p11s4);
    ShiftLeft(in=p11s4, out=p11s3);
    ShiftLeft(in=p11s3, out=p11s2);
    ShiftLeft(in=p11s2, out=p11s1);
    ShiftLeft(in=p11s1, out=p11s0);
    // Shifts for digit 12
    ShiftLeft(in=p12s12, out=p12s11);
    ShiftLeft(in=p12s11, out=p12s10);
    ShiftLeft(in=p12s10, out=p12s9);
    ShiftLeft(in=p12s9, out=p12s8);
    ShiftLeft(in=p12s8, out=p12s7);
    ShiftLeft(in=p12s7, out=p12s6);
    ShiftLeft(in=p12s6, out=p12s5);
    ShiftLeft(in=p12s5, out=p12s4);
    ShiftLeft(in=p12s4, out=p12s3);
    ShiftLeft(in=p12s3, out=p12s2);
    ShiftLeft(in=p12s2, out=p12s1);
    ShiftLeft(in=p12s1, out=p12s0);
    // Shifts for digit 13
    ShiftLeft(in=p13s13, out=p13s12);
    ShiftLeft(in=p13s12, out=p13s11);
    ShiftLeft(in=p13s11, out=p13s10);
    ShiftLeft(in=p13s10, out=p13s9);
    ShiftLeft(in=p13s9, out=p13s8);
    ShiftLeft(in=p13s8, out=p13s7);
    ShiftLeft(in=p13s7, out=p13s6);
    ShiftLeft(in=p13s6, out=p13s5);
    ShiftLeft(in=p13s5, out=p13s4);
    ShiftLeft(in=p13s4, out=p13s3);
    ShiftLeft(in=p13s3, out=p13s2);
    ShiftLeft(in=p13s2, out=p13s1);
    ShiftLeft(in=p13s1, out=p13s0);
    // Shifts for digit 14
    ShiftLeft(in=p14s14, out=p14s13);
    ShiftLeft(in=p14s13, out=p14s12);
    ShiftLeft(in=p14s12, out=p14s11);
    ShiftLeft(in=p14s11, out=p14s10);
    ShiftLeft(in=p14s10, out=p14s9);
    ShiftLeft(in=p14s9, out=p14s8);
    ShiftLeft(in=p14s8, out=p14s7);
    ShiftLeft(in=p14s7, out=p14s6);
    ShiftLeft(in=p14s6, out=p14s5);
    ShiftLeft(in=p14s5, out=p14s4);
    ShiftLeft(in=p14s4, out=p14s3);
    ShiftLeft(in=p14s3, out=p14s2);
    ShiftLeft(in=p14s2, out=p14s1);
    ShiftLeft(in=p14s1, out=p14s0);
    // Shifts for digit 15
    ShiftLeft(in=p15s15, out=p15s14);
    ShiftLeft(in=p15s14, out=p15s13);
    ShiftLeft(in=p15s13, out=p15s12);
    ShiftLeft(in=p15s12, out=p15s11);
    ShiftLeft(in=p15s11, out=p15s10);
    ShiftLeft(in=p15s10, out=p15s9);
    ShiftLeft(in=p15s9, out=p15s8);
    ShiftLeft(in=p15s8, out=p15s7);
    ShiftLeft(in=p15s7, out=p15s6);
    ShiftLeft(in=p15s6, out=p15s5);
    ShiftLeft(in=p15s5, out=p15s4);
    ShiftLeft(in=p15s4, out=p15s3);
    ShiftLeft(in=p15s3, out=p15s2);
    ShiftLeft(in=p15s2, out=p15s1);
    ShiftLeft(in=p15s1, out=p15s0);

    // Now, we add together all numbers of the form 
    //Adding together everything
    Add16(a=p0s0, b=p1s0, out=add2);
    Add16(a=p2s0, b=add2, out=add3);
    Add16(a=p3s0, b=add3, out=add4);
    Add16(a=p4s0, b=add4, out=add5);
    Add16(a=p5s0, b=add5, out=add6);
    Add16(a=p6s0, b=add6, out=add7);
    Add16(a=p7s0, b=add7, out=add8);
    Add16(a=p8s0, b=add8, out=add9);
    Add16(a=p9s0, b=add9, out=add10);
    Add16(a=p10s0, b=add10, out=add11);
    Add16(a=p11s0, b=add11, out=add12);
    Add16(a=p12s0, b=add12, out=add13);
    Add16(a=p13s0, b=add13, out=add14);
    Add16(a=p14s0, b=add14, out=add15);
    Add16(a=p15s0, b=add15, out=out);
}
