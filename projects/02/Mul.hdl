/** out = a * b
  * Some insights about multiplying two binary numbers:
  * Like with multiplication of decimals, we multiply 'a' by each digit of 'b', left-shifted k units,
  * k being the index (k=0 being the LSB, that is, multiplying 'a' by the first digit involves no shift)
  *
  * But, in contrast to decimal multiplication, the partial product of 'a' by a digit of 'b', is either
  * a(if the digit was 1) or 0000...0 (if the digit was 0).
  * So basically, the process is as follows:
  *  - Foreach i in 0 to 15, let prod_i = a if b[i] == 1, else 0(repeated 16 times)
  *                          let prod_i_shifted = leftShift i times of prodI
  *  out = sum prod_i_shifted for i in 0 to 15.  (sum can be done with 15 Add16 gates)
  * Regarding shifting, we can calculate all possible shifts of 'a', by applying shift
  * to previous shifts (e.g, 'a' shifted 15 times = 'a' shifted 14 times, shifted once more)
  * Since shifting 0 is a no-op, we don't need anything special for it.
  * We'll use a Mux to determine whether a partial product(prod_i_shifted) should be a(after shift)
  * or 0, and finally we'll add all partial products using Add16 gates.
  */
CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    // I will use the following notation for internal pins:
    // pNsY means the partial product of a with digit index N, and has to be LShifted Y times
    PARTS:

    // we use aS# to represent a, left shifted # units.
    LogicalShiftLeft(in=a, out=aS1);
    LogicalShiftLeft(in=aS1, out=aS2);
    LogicalShiftLeft(in=aS2, out=aS3);
    LogicalShiftLeft(in=aS3, out=aS4);
    LogicalShiftLeft(in=aS4, out=aS5);
    LogicalShiftLeft(in=aS5, out=aS6);
    LogicalShiftLeft(in=aS6, out=aS7);
    LogicalShiftLeft(in=aS7, out=aS8);
    LogicalShiftLeft(in=aS8, out=aS9);
    LogicalShiftLeft(in=aS9, out=aS10);
    LogicalShiftLeft(in=aS10, out=aS11);
    LogicalShiftLeft(in=aS11, out=aS12);
    LogicalShiftLeft(in=aS12, out=aS13);
    LogicalShiftLeft(in=aS13, out=aS14);
    LogicalShiftLeft(in=aS14, out=aS15);

    // we use p# to represent the shifted partial product of the #'th digit.
    Mux16(a=false, b=a, sel=b[0], out=p0);
    Mux16(a=false, b=aS1, sel=b[1], out=p1);
    Mux16(a=false, b=aS2, sel=b[2], out=p2);
    Mux16(a=false, b=aS3, sel=b[3], out=p3);
    Mux16(a=false, b=aS4, sel=b[4], out=p4);
    Mux16(a=false, b=aS5, sel=b[5], out=p5);
    Mux16(a=false, b=aS6, sel=b[6], out=p6);
    Mux16(a=false, b=aS7, sel=b[7], out=p7);
    Mux16(a=false, b=aS8, sel=b[8], out=p8);
    Mux16(a=false, b=aS9, sel=b[9], out=p9);
    Mux16(a=false, b=aS10, sel=b[10], out=p10);
    Mux16(a=false, b=aS11, sel=b[11], out=p11);
    Mux16(a=false, b=aS12, sel=b[12], out=p12);
    Mux16(a=false, b=aS13, sel=b[13], out=p13);
    Mux16(a=false, b=aS14, sel=b[14], out=p14);
    Mux16(a=false, b=aS15, sel=b[15], out=p15);

    // Now, we add together all partial products
    Add16(a=p0, b=p1, out=add2);
    Add16(a=p2, b=add2, out=add3);
    Add16(a=p3, b=add3, out=add4);
    Add16(a=p4, b=add4, out=add5);
    Add16(a=p5, b=add5, out=add6);
    Add16(a=p6, b=add6, out=add7);
    Add16(a=p7, b=add7, out=add8);
    Add16(a=p8, b=add8, out=add9);
    Add16(a=p9, b=add9, out=add10);
    Add16(a=p10, b=add10, out=add11);
    Add16(a=p11, b=add11, out=add12);
    Add16(a=p12, b=add12, out=add13);
    Add16(a=p13, b=add13, out=add14);
    Add16(a=p14, b=add14, out=add15);
    Add16(a=p15, b=add15, out=out);
}
