// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // handling x pre-ops: possibly zero x, then possibly negate x, outputting 'xHandled'
    Mux16(a=x, b=false, sel=zx, out=xAfterZero);
    Not16(in=xAfterZero, out=negXafterZero);
    Mux16(a=xAfterZero, b=negXafterZero, sel=nx, out=xHandled);

    // handling y pre-ops: possibly zero y, then possibly negate x, outputting 'xHandled'
    Mux16(a=y, b=false, sel=zy, out=yAfterZero);
    Not16(in=yAfterZero, out=negYafterZero);
    Mux16(a=yAfterZero, b=negYafterZero, sel=ny, out=yHandled);

    // both possible 'f' computations using the handled 'x' and 'y' variables
    Add16(a=xHandled, b=yHandled, out=aPlusB);
    And16(a=xHandled, b=yHandled, out=aAndB);

    // the chosen computation is piped to 'fOut'
    Mux16(a=aAndB, b=aPlusB, sel=f, out= fOut);
    Not16(in=fOut, out=notFout);
    // either we pipe that directly to 'out', or we pipe a negation of that result
    // We also split the out signal to various sizes needed
    Mux16(a=fOut, b= notFout, sel= no, out=out,
          out[15]=outMSB, out[0..7]=outFirstHalf, out[8..15]=outSecondHalf);

    // the output is zero IFF the 'or' of all bits is 1
    Or8Way(in=outFirstHalf, out=o1);
    Or8Way(in=outSecondHalf, out=o2);
    Or(a=o1, b=o2, out=allDigitsAre0);
    Not(in=allDigitsAre0, out=zr);

    // The output is negative IFF the last bit(sign bit) is 1
    And(a=outMSB, b=true, out=ng);
}
