// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

  // This array lets us calculate left-shifts of 1:
  // 2^x == 1 << x == powersOf2[x]
  static Array powersOf2;

    // the value 2*q*y that is recursively calculated when performing positive division x/y
    // (where q is x/2y)
    // conceptually it can be thought as an additional return value from divideAbs
    // (we don't have tuples/pointers so I use a static variable)
    static int qyqy;

    /** Initializes the library. */
    function void init() {
      let powersOf2 = Array.new(16);
      let powersOf2[0] = 1;
      let powersOf2[1] = 2;
      let powersOf2[2] = 4;
      let powersOf2[3] = 8;
      let powersOf2[4] = 16;
      let powersOf2[5] = 32;
      let powersOf2[6] = 64;
      let powersOf2[7] = 128;
      let powersOf2[8] = 256;
      let powersOf2[9] = 512;
      let powersOf2[10] = 1024;
      let powersOf2[11] = 2048;
      let powersOf2[12] = 4096;
      let powersOf2[13] = 8192;
      let powersOf2[14] = 16384;
      // the following obviously isn't correct, but it's good enough for
      // purposes of bitwise operations.
      let powersOf2[15] = -32767 - 1;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedProd, i;
      let sum = 0;
      let shiftedProd = x;
      let i = 0;
      while (i < 16) {
        // if the i'th bit of y is 1 == y & powersOf2[i]
        if (y & (powersOf2[i])) {
          let sum = sum + shiftedProd;
        }
        let shiftedProd = shiftedProd + shiftedProd; 
        let i = i + 1;
      }
      // do Output.printInt(x);
      // do Output.printString(" * ");
      // do Output.printInt(y);
      // do Output.printString(" = ");
      // do Output.printInt(sum);
      // do Output.println();
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */

    function int divide(int x, int y) {
      var int res;
      let res = Math.divideAbs(Math.abs(x), Math.abs(y));
      if (((x<0) & (y > 0)) | ((x>0) & (y < 0))) {
        let res = -res;
      }
      // do Output.printInt(x);
      // do Output.printString(" / ");
      // do Output.printInt(y);
      // do Output.printString(" = ");
      // do Output.printInt(res);
      // do Output.println();
      return res;
    }

    // helper function for division of non-negative integers
    function int divideAbs(int x, int y) {
      var int q; // quotinent of x and y+y
      // the check for y<0 is needed since one of the recursive calls may overflow
      // even though the initial y is positive.
      if ((y > x) | (y < 0)) {
        // if y > x, then of course that x/y < 1 and in particular
        // 2x/2y < 1, thus 2x/2y = qyqy = 0
        let qyqy = 0;
        return 0;
      }
      let q = Math.divideAbs(x, y + y);
      // now, qyqy stores 2*q*y
      if ((x - qyqy) < y) {
        // we want to calculate 2*nextQ*nextY
        // knowing: nextY = y/2
        //          nextQ = 2q   (because )
        // thus, 2*nextQ*nextY = 2*2q * y/2 = 2*q*y = qyqy
        // therefore it is unchanged
        return q + q;
      } else {
        // knowing: nextY = y/2
        //          nextQ = 2q+1
        // thus, 2*nextQ*nextY = 2*(2q+1) * y/2 = 2q*y + y = qyqy + y
        // thus, we'll add 'y' to qyqy.
        let qyqy = qyqy + y;
        return (q + q) + 1;
      }
    }

    /** Returns the integer part of the square root of x.
     */
    function int sqrt(int x) {
      // y is the current root approximation
      var int y, j;
      var int nextApprox, nextApproxSquare;
      let y = 0;
      let j = (16/2) - 1;
      while (j > (-1)) {
        let nextApprox = y + powersOf2[j];
        let nextApproxSquare = nextApprox * nextApprox;
        // special care for overflows: squaring of a positive number
        // should always be positive.
        // We express '<=' as 'not >'. We cannot transform A <= B to A < B+1,
        // because B+1 might overflow
        if ((~(nextApproxSquare > x)) & (nextApproxSquare > 0)) {
          let y = nextApprox;
        }
        let j = j - 1;
      }
      // do Output.printString("sqrt(");
      // do Output.printInt(x);
      // do Output.printString(") = ");
      // do Output.printInt(y);
      // do Output.println();
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }
}
