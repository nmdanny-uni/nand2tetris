// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int capacity;
    field Array buffer;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength = 0) {
        let length = 0;
        let capacity = 0;
        let buffer = null;
        return this;
      }
      let buffer = Array.new(maxLength);
      let length = 0;
      let capacity = maxLength;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (~(buffer = null)) {
        do Memory.deAlloc(buffer);
      }
      do Memory.deAlloc(this);
      return;
    }

    // TODO do I need validation for these methods?

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let buffer[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let buffer[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length > 0) {
        let length = length - 1;
        // no need to actually delete data from buffer, we just ignore it
      }
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int sum, ix;
      var char curChar;
      var boolean negative;
      let negative = false;
      let sum = 0;
      let ix = 0;
      if (charAt(0) = 45) {
        let negative = true;
        let ix = 1;
      }
      while (ix < length) {
        let curChar = charAt(ix);
        if ((curChar > 47) & (curChar < 58)) {
          let sum = (sum * 10) + (curChar - 48);
          let ix = ix + 1;
        } else {
          // encountered non-digit, break away from the loop
          let ix = length;
        }
      }
      if (negative) {
        let sum = -sum;
      }
      return sum;
    }


    /** Helper recursive method that adds the given number to the string */
    method void addPositiveInt(int i) {
      var int div, rem;
      let div = i/10;
      let rem = i - ((i/10) * 10); // mod 10
      if (~(div = 0)) {
        do addPositiveInt(div);
      }
      do appendChar(rem + 48);
      return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length = 0;
      if (val < 0) {
        do appendChar(45); // dash
        do addPositiveInt(-val);
        return;
      }
      do addPositiveInt(val);
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
