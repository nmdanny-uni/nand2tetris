// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


 /* Breakdown of C-instruction digits (when MSB is 1)
    jump
    instruction[0] - jump if out > 0
    instruction[1] - jump if out = 0
    instruction[2] - jump if out < 0
    ALU computation destination
    instruction[3] - memory at A
    instruction[4] - D register
    instruction[5] - A register
    ALU control bits
    instruction[6] - c6  = no
    instruction[7] - c5  = f
    instruction[8] - c4  = ny
    instruction[9] - c3  = zy
    instruction[10] - c2 = nx
    instruction[11] - c1 = zx
    instruction[12] - a - 0 when computation uses ARegister, 1 when using M
    misc
    instruction[13] - doesn't matter
    instruction[14] - doesn't matter
    instruction[15] - 1 when C-instruction, otherwise 0.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

        PARTS:
        // Data register is fairly straightforward. It's updated IFF we have
        // a C instruction and dest contains M bit
        And(a=instruction[15], b=instruction[3], out = cInsWithMem);
        DRegister(in=aluOut, load=cInsWithMem,out=dataRegOut);

        ALU(zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            out=aluOut, out=outM, zr=zr, ng=ng,
            x=dataRegOut, y=AorM);
        // Mux shall pass an instruction to register IFF it is an A-instruction IFF MSB is 0. Otherwise pass ALU out
        // (If passing A-instruction, ignore the MSB obviously)
        // TODO should the final bits of this mux be 0?
        Mux16(a[0..14]=instruction[0..14], b=aluOut, sel=instruction[15], out=addressRegIn);
        // ARegister should be updated IFF we have an A-instruction, or a *C-instruction whose destination
        // field contains Address(d1, that is instruction[5]).
        //     * no need to check that it's a C-instruction, since we eliminated the possibility it's A instruction.
        Or(a=instruction[15], b=instruction[5], out=shouldUpdateRegister);
        // TODO should the MSB of of the output be changed?
        ARegister(in=addressRegIn, load=shouldUpdateRegister, out=addressRegOut, out[0..14]=addressM);

        // Decide whether to pass address or M-value as ALU input
        // instruction[12] - a - 0 when computation uses ARegister, 1 when using M
        Mux16(a=addressRegOut, b=inM, sel=instruction[12], out= AorM);

        // PC: By default, we'll always increment by 1. As for loading, we need to
        // inspect the 
        And(a=zr, b=instruction[1], out=jumpViaZr); // zr: out == 0
        And(a=ng, b=instruction[2], out=jumpViaNg); // ng: out < 0
        // because of trichotomy(infi trauma), if not zr and ng, then out > 0
        Nand(a=zr, b=ng, out= outPositive);
        And(a=outPositive, b=instruction[0], out=jumpViaPositiveOut);
        // the 3 different 'and' gates above cover all(2^3=8) jump possibilities
        // the rest of the 'in' fields are 0 and thus won't affect the result.
        Or8Way(in[0]=jumpViaZr, in[1]=jumpViaNg, in[2]=jumpViaPositiveOut, out=doJump);
        // TODO what about the MSB of this output
        PC(in=addressRegOut, out[0..14]=pc, reset=reset, inc=true, load=doJump);
}
