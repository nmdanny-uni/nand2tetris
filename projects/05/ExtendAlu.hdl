/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.

* From above, we infer the following table for a Mux that selects which
  output to pipe, using sel=instruction[7..8](7 being LSB):
  sel  | out
  00   | x*y
  01   | shift
  10   | x*y
  11   | ALU out

  furthermore, there are 4 shift combinations depending on instruction[4..5],
  thus we get a table for another Mux, using sel=instruction[4..5](4 being LSB)
  sel  | out
  00   | rshift y
  01   | rshift x
  10   | lshift y
  11   | lshift x

*/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;

     PARTS:
     ALU(x=x, y=y, out=aluOut, zr=aluZr, ng=aluNg,
         zx=instruction[5],
         nx=instruction[4],
         zy=instruction[3],
         ny=instruction[2],
         f=instruction[1],
         no=instruction[0]
     );
  
     Mul(a=x, b=y, out=mulXY);
     ShiftLeft(in=x, out=lshiftX);
     ShiftLeft(in=y, out=lshiftY);
     ShiftRight(in=x, out=rshiftX);
     ShiftRight(in=y, out=rshiftY);

     Mux4Way16(out=shift, sel=instruction[4..5],
               a=rshiftY, b=rshiftX, c=lshiftY, d=lshiftX);
  
     Mux4Way16(out=out, out[0..7]=outFirstHalf, out[8..15]=outSecondHalf, out[15]=outMSB,
               sel=instruction[7..8],
               a=mulXY, b= shift, c=mulXY, d=aluOut);

     // We calculate 'zr' and 'ng' exactly how we calculated them in the ALU,
     // But now using the final output from the Mux rather than ALU.
     // This makes the 'zr' and 'ng' flags from the ALU somewhat redundant, but
     // since there's only 1 ALU in a computer, the cost of a few extra NANDs is negligible.

     // the output is zero IFF the 'or' of all bits is 1
     Or8Way(in=outFirstHalf, out=o1);
     Or8Way(in=outSecondHalf, out=o2);
     Or(a=o1, b=o2, out=allDigitsAre0);
     Not(in=allDigitsAre0, out=zr);

     // The output is negative IFF the last bit(sign bit) is 1
     And(a=outMSB, b=true, out=ng);
}
